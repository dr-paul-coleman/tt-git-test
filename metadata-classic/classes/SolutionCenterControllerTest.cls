/*
   Copyright (c) 2017 Thumbtack, All rights reserved.

Change List:
------------
Version      Date          Author            Description
========+============+=================+================================================
1.0       2/13/18      pcoleman           Created
========+============+=================+===============================================*/
@IsTest
public with sharing class SolutionCenterControllerTest
{

    private static final Id MESSAGE_FILE_RT_ID = DisputeMessage__c.SObjectType.getDescribe().getRecordTypeInfosByName().get('File Image').getRecordTypeId();
    private static final Id MESSAGE_RT_ID = DisputeMessage__c.SObjectType.getDescribe().getRecordTypeInfosByName().get('Message').getRecordTypeId();

    /**
    * @author Paul Coleman
    * @date 2018-02-13
    * @description Inserts a set of four test Accounts.
    */
    @TestSetup
    private static void createTestAccounts()
    {
        TestUtilities.insertFourCoreThumbtackUsers();
        DisputeExperience__c experience = (DisputeExperience__c) JSON.deserialize( DisputeTriggerHandlerTest.DEFAULT_DISPUTE_EXPERIENCE_JSON, DisputeExperience__c.class );
        insert experience;
    }

    /**
    * @author Paul Coleman
    * @date 2018-01-31
    * @description Utility function to load up a test dispute offer with a test account/contact.
    * @return Dispute__c An inserted dispute record.
    */
    public static Dispute__c loadInitiatorDispute( Boolean isInitiator ) {

        User miTestUser = [SELECT Id FROM User WHERE Team__c = 'Marketplace Integrity' AND IsActive = true AND UserRole.DeveloperName = 'MIFrontLineUser' AND Profile.Name = '*Marketplace Integrity' LIMIT 1];
        Dispute__c newDispute = (Dispute__c) JSON.deserialize(DisputeTriggerHandlerTest.DEFAULT_DISPUTE_JSON, Dispute__c.class);
        Account[] users = TestUtilities.getAllTestAccounts().values();
        System.runAs( miTestUser )
        {
            Contact initiator = isInitiator? users[0].Contacts[0] : users[1].Contacts[0];
            Contact responder = isInitiator? users[1].Contacts[0] : users[0].Contacts[0];
            String nameString = 'Dispute between ' + initiator.Name + ' and ' + responder.Name;
            newDispute.InitiatorContact__c = initiator.Id;
            newDispute.InitiatorAccount__c = initiator.AccountId;
            newDispute.InitiatorHash__c = CryptoUtility.hashId(initiator.Id);
            newDispute.ResponderContact__c = responder.Id;
            newDispute.ResponderAccount__c = responder.AccountId;
            newDispute.ResponderHash__c = CryptoUtility.hashId(responder.Id);
            newDispute.DisputeExperience__c = [SELECT Id FROM DisputeExperience__c LIMIT 1].Id;
            newDispute.bid_pk__c = newDispute.IdHash__c;
            insert newDispute;

            //make sure we get the Hash generated by the Trigger's before update event
            Dispute__c updatedDispute = [SELECT IdHash__c, OwnerId, Name, DisputeStartDate__c,  MaxOfDaysForInitiatorToConfirm__c, MaxOfDaysAllowedForDispute__c, InitiatorTotalOfferCount__c, ResponderTotalOfferCount__c, InitiatorConfirmationDueDate__c, DisputeResolutionDueDate__c from Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            newDispute.IdHash__c = updatedDispute.IdHash__c;
            newDispute.OwnerId = updatedDispute.OwnerId;

            //assert Trigger results
            System.assertEquals( nameString, updatedDispute.Name , 'Dispute Name not set  by DisputeTriggerHandler.setDisputeDefaults().');
            System.assertNotEquals( null, updatedDispute.IdHash__c, 'Dispute IdHash__c is null' );
            System.assertNotEquals( null, updatedDispute.DisputeStartDate__c, 'Dispute DisputeStartDate__c not set by DisputeTriggerHandler.setDisputeDefaults()' );
            System.assertEquals( updatedDispute.InitiatorConfirmationDueDate__c, updatedDispute.DisputeStartDate__c.addDays( Integer.valueOf(updatedDispute.MaxOfDaysForInitiatorToConfirm__c ) ), 'Dispute InitiatorConfirmationDueDate__c not set by DisputeTriggerHandler.setDisputeDefaults()' );
            System.assertEquals( updatedDispute.DisputeResolutionDueDate__c, updatedDispute.DisputeStartDate__c.addDays( Integer.valueOf(updatedDispute.MaxOfDaysAllowedForDispute__c ) ), 'Dispute DisputeResolutionDueDate__c not set by DisputeTriggerHandler.setDisputeDefaults()' );
            System.assertEquals( 0, updatedDispute.InitiatorTotalOfferCount__c , 'Dispute InitiatorTotalOfferCount__c Not initalized to zero.');
            System.assertEquals( 0, updatedDispute.ResponderTotalOfferCount__c , 'Dispute ResponderTotalOfferCount__c Not initalized to zero.');
        }

        return newDispute;
    }

    /**
    * @author Paul Coleman
    * @date 2018-03-01
    * @description Insert an MTS test record.
    */
    public static MIIncident__c insertIncident(Dispute__c dispute)
    {
        Map<Decimal,Account> accounts = TestUtilities.getTestAccounts( (Set<Id>)null );
        Account proAccount = accounts.get( TestUtilities.PRO_USR_USER_ID );
        Account customerAccount = accounts.get( TestUtilities.CUSTOMER_USR_USER_ID );

        // build a test MI Incident from a corresponding test external incident
        MIIncident__c testIncident = MiIncidentTriggerTest.loadIncident( BecquerelUtility.createTestExternalIncidents(1)[0] );
        Test.setFixedSearchResults( new Id[]{ proAccount.Id, customerAccount.Id } );
        testIncident.ProAccount__c = dispute.InitiatorAccount__c;
        testIncident.ProContact__c = dispute.InitiatorContact__c;
        testIncident.CustomerAccount__c = dispute.ResponderAccount__c;
        testIncident.CustomerContact__c = dispute.ResponderContact__c;
        insert testIncident;

        dispute.MIIncident__c = testIncident.Id;
        update dispute;

        return testIncident;
    }

    /**
    * @author Paul Coleman
    * @date 2018-02-26
    * @description Tests that updating a dispute description as a initiator results in a database update.
    */
    @IsTest
    private static void testUpdateDescription()
    {
        User portalUser; // to be created on the fly
        Dispute__c newDispute = loadInitiatorDispute(true);
        String testData = 'New Description';

        Test.startTest();

            portalUser = [SELECT Id,Account.user_pk_id__c FROM User WHERE ContactId = :newDispute.InitiatorContact__c LIMIT 1];
            System.runAs( portalUser )
            {
                SolutionCenterController.updateDisputeDescription( newDispute.IdHash__c, testData );
            }

        Test.stopTest();

        System.runAs( TestUtilities.USER_TACK_BOT )
        {
            Dispute__c insertedDispute = [SELECT Name, IdHash__c, Description__c from Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            System.assertEquals(testData, insertedDispute.Description__c, 'Dispute Description Not Updated.');
        }

    }

    /**
    * @author Paul Coleman
    * @date 2018-02-26
    * @description Tests that withdrawing a dispute as an initiator results in a database update on dispute and related offer(s).
    */
    @IsTest
    private static void testWithdrawDisputeAndOffer()
    {
        User portalUser; // to be created on the fly
        Dispute__c newDispute = loadInitiatorDispute(true);
        insertIncident(newDispute);

        String testReason = 'Test Reason';
        String offerHashWithdrawn;
        Dispute__c updatedDispute;
        Datetime now = Datetime.now();

        Test.startTest();

        portalUser = [SELECT Id FROM User WHERE ContactId = :newDispute.InitiatorContact__c LIMIT 1];
        System.runAs( portalUser )
        {
            Map<String, Object> offerFields = new Map<String, Object>{ 'DisputeHash__c' => newDispute.IdHash__c, 'ResolutionCompleteByDate__c' => Decimal.valueOf(now.getTime()), 'DesiredResolution__c' => 'I want a full refund.', 'DesiredRefundAmount__c' => 10000, 'Note__c' => 'My master bedroom is missing.' };

            // create an initial offer as the Dispute Initiator
            offerHashWithdrawn = SolutionCenterController.createOffer( offerFields );

            updatedDispute = [SELECT Id, (SELECT ResolutionCompleteByDate__c, Status__c, DesiredResolution__c, DesiredRefundAmount__c, Note__c FROM DisputeOffers__r), ResponderFirstActionDueDate__c, InitiatorConfirmationDate__c, Status__c, Stage__c FROM Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            System.assertEquals( 'Responder first action needed', updatedDispute.Stage__c, 'Dispute Stage__c not set to `Responder first action needed` after Initiator confirmation.' );
            System.assertEquals( 'Awaiting', updatedDispute.Status__c, 'Dispute Status__c not set to `Awaiting` after Initiator confirmation.' );
            System.assertNotEquals( null, updatedDispute.ResponderFirstActionDueDate__c, 'Dispute InitiatorConfirmationDate__c not set after Initiator confirmation.' );
            System.assertNotEquals( null, updatedDispute.InitiatorConfirmationDate__c, 'Dispute InitiatorConfirmationDate__c not set after Initiator confirmation.' );

            DisputeOffer__c newOffer = updatedDispute.DisputeOffers__r[0];
            System.assertEquals( now, newOffer.ResolutionCompleteByDate__c, 'New Offer ResolutionCompleteByDate__c incorrect.' );
            System.assertEquals( 'Pending', newOffer.Status__c, 'New Offer Status__c incorrect.' );
            System.assertEquals( offerFields.get('DesiredResolution__c'), newOffer.DesiredResolution__c, 'New Offer DesiredResolution__c incorrect.' );
            System.assertEquals( offerFields.get('DesiredRefundAmount__c'), newOffer.DesiredRefundAmount__c, 'New Offer DesiredRefundAmount__c incorrect.' );
            System.assertEquals( offerFields.get('Note__c'), newOffer.Note__c, 'New Offer Note__c incorrect.' );

            SolutionCenterController.withdrawDispute( newDispute.IdHash__c , testReason, 'Notes ' + testReason );
        }

        Test.stopTest();

        System.runAs( TestUtilities.USER_TACK_BOT )
        {
            updatedDispute = [SELECT Id, Status__c, Stage__c, WithdrawalReason__c, WithdrawalDate__c, MIIncident__r.SolutionCenterStage__c, (SELECT Status__c, ContactSharedWith__c FROM DisputeOffers__r) FROM Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            System.assertEquals(testReason, updatedDispute.WithdrawalReason__c, 'Dispute WithdrawalReason__c Not set on Withdrawal.');
            System.assertNotEquals(null, updatedDispute.WithdrawalDate__c, 'Dispute WithdrawalDate__c Not set on Withdrawal.');
            System.assertEquals('Withdrawn', updatedDispute.Stage__c, 'Dispute Stage Not Updated to `Withdrawn` on Withdrawal.');
            System.assertEquals('Under review', updatedDispute.Status__c, 'Dispute Status Not Updated to `Under review` on Withdrawal.');
            System.assertEquals(updatedDispute.Status__c + ' > ' + updatedDispute.Stage__c, updatedDispute.MIIncident__r.SolutionCenterStage__c, 'Dispute Incident SolutionCenterStage__c Not Updated to match dispute dispute.Status__c + > + dispute.Stage__c.');

            //assert related offer
            System.assertEquals('Withdrawn', updatedDispute.DisputeOffers__r[0].Status__c, 'Dispute child offer did not get updated with a `Withdrawn` status.');
            System.assertNotEquals(null, updatedDispute.DisputeOffers__r[0].ContactSharedWith__c, 'DisputeOffer ContactSharedWith__c did not get set via SolutionCenterUtility.doDisputeOfferShareWith() (async update).');
        }
    }

    /**
    * @author Paul Coleman
    * @date 2018-02-26
    * @description Tests creating a dispute message related to an offer followed by a related file message (upload).
    */
    @IsTest
    private static void testCreateMessageAndFile()
    {
        User portalUser; // to be created on the fly
        // 1] Create a test dispute
        Dispute__c newDispute = loadInitiatorDispute(true);
        String offerHash;
        String fileMsgHash;
        String parentMsgHash;
        String versionId;
        String disputeDataJson;

        Test.startTest();

            System.assertNotEquals( NULL, newDispute.DisputeExperience__c, 'Test dispute.DisputeExperience__c is NULL' );
            System.assertEquals( false, [SELECT Id FROM DisputeExperience__c LIMIT 1].isEmpty(), 'No Test DisputeExperience__c found' );
            portalUser = [SELECT Id FROM User WHERE ContactId = :newDispute.InitiatorContact__c LIMIT 1];
            System.runAs( portalUser )
            {
                // 2] create a test offer
                Map<String, Object> offerFields = new Map<String, Object>{ 'DisputeHash__c' => newDispute.IdHash__c, 'ResolutionCompleteByDate__c' => Datetime.now(), 'DesiredResolution__c' => 'I want a full refund.', 'DesiredRefundAmount__c' => 10000, 'Note__c' => 'My master bedroom is missing.' };
                offerHash = SolutionCenterController.createOffer( offerFields );

                // 3 create a DisputeMessage of type RT `Message` (default)
                Map<String, Object> parentMsgFields = new Map<String, Object>{ 'OfferHash__c' => offerHash, 'Message__c' => 'A Test Message' };
                parentMsgHash = SolutionCenterController.createMessage( parentMsgFields );

                // 4 create a child DisputeMessage of type RT `File Image`
                Map<String, Object> fileMsgFields = new Map<String, Object>{ 'OfferHash__c' => offerHash, 'ParentMessageHash__c' => parentMsgHash, 'Message__c' => 'A Test File', 'RecordTypeId' => MESSAGE_FILE_RT_ID };
                versionId = SolutionCenterController.uploadMsgFile( fileMsgFields, 'Test Text File', EncodingUtil.base64Encode( Blob.valueOf('Text Content') ) );

                // 5 verify that child Dispute messages exist on the test offer
                DisputeOffer__c offer = [SELECT Id, (SELECT Id, RecordTypeId, ParentMessageHash__c, DisputeMessage__c, Message__c FROM DisputeMessages__r) FROM DisputeOffer__c WHERE IdHash__c = :offerHash LIMIT 1];
                System.assertNotEquals( 0, offer.DisputeMessages__r.size(), 'Dispute message(s) failed to insert.');
                try { update offer.DisputeMessages__r[0]; } catch(DmlException dEx) { System.debug(LoggingLevel.ERROR, dEx.getMessage()); }
                Integer disputeMessageCount = 0;
                // code idHash code coverage on DisputeMessage update (a rarity)
                for( DisputeMessage__c msg: offer.DisputeMessages__r )
                {
                    if( 'A Test File'.equalsIgnoreCase( msg.Message__c ) )
                    {
                        System.assertEquals( MESSAGE_FILE_RT_ID, msg.RecordTypeId, 'File Message record type not correct.');
                        System.assertNotEquals( null, msg.DisputeMessage__c, 'Parent Message not set on File Message.');
                        System.assertEquals( msg.ParentMessageHash__c, parentMsgHash, 'File Message parent hash is not set correctly.');
                    }
                    else
                    {
                        if( MESSAGE_RT_ID == msg.RecordTypeId ) { disputeMessageCount++; }
                    }

                }

                System.assertEquals( 1, disputeMessageCount, 'RecordType `Message` count not correct.');
                disputeDataJson = SolutionCenterController.getDisputeDataByHash(newDispute.IdHash__c);
                System.assertNotEquals( null, new SolutionCenterController().getCurrentUserHash(), 'SolutionCenterController.getCurrentUserHash() returned null');
                System.assertNotEquals( null, SolutionCenterController.getMessageRecordTypes(), 'SolutionCenterController.getCurrentUserHash() returned null');
                System.assertEquals(true, !''.equalsIgnoreCase(disputeDataJson), 'Dispute Data failed to retrieve (dispute hash parm).');
                System.assertEquals(true, !''.equalsIgnoreCase(SolutionCenterController.getDisputeData()), 'Dispute Data failed to retrieve (no dispute hash parm).');

            }

        Test.stopTest();

        System.runAs( TestUtilities.USER_TACK_BOT )
        {
            // assert getDisputeData is not empty
            try
            {
                SolutionCenterController.getDisputeData();
            }
            catch (SolutionCenterController.SolutionCenterException scex)
            {
                System.assertEquals( scex.getMessage(), 'Only authenticated portal users may fetch all Disputes.', 'Dispute Data retrieved incorrect response for standard user context.');
            }

            // assert content version
            System.assert(!String.isEmpty(versionId) && versionId.startsWith(Schema.ContentVersion.sObjectType.getDescribe().getKeyPrefix()), 'File Content insert failed to return a valid record Id');
            for (DisputeMessage__c msg : [SELECT Id, (SELECT ContentDocument.LatestPublishedVersionId FROM AttachedContentDocuments), ContactSharedWith__c FROM DisputeMessage__c WHERE IdHash__c = :fileMsgHash ORDER BY CreatedDate ASC])
            {
                AttachedContentDocument[] chatterFiles = msg.AttachedContentDocuments;
                System.assertEquals(1, chatterFiles.size(), 'Linked File count to DisputeMessage is incorrect');
                Id cvId = chatterFiles[0].ContentDocument.LatestPublishedVersionId;
                System.assertEquals(cvId, versionId, 'Linked File Id does not match file inserted via uploadFile.');
                System.assertEquals(newDispute.ResponderContact__c, msg.ContactSharedWith__c, 'Dispute msg not shared with Responder.');
            }


            // assert updates to Dispute
            Dispute__c updatedDispute = [SELECT DisputeLastView__c, DisputeLastView__r.InitiatorLastViewedDate__c, InitiatorTotalOfferCount__c, InitiatorTotalMessageCount__c, (SELECT InitiatorMessageCount__c FROM DisputeOffers__r) FROM Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            System.assertNotEquals(null, updatedDispute.DisputeLastView__r.InitiatorLastViewedDate__c, 'Dispute DisputeLastView__r.InitiatorLastViewedDate__c Not Updated.');
            System.assertEquals(1, updatedDispute.DisputeOffers__r[0].InitiatorMessageCount__c, 'Offer Message (RecordType `Message`) Count for Initiator incorrect.');
            System.assertEquals(1, updatedDispute.InitiatorTotalOfferCount__c, 'Dispute Offer Count for Initiator incorrect.');
            System.assertEquals(1, updatedDispute.InitiatorTotalMessageCount__c, 'Dispute Message (RecordType `Message`) Count for Initiator incorrect.');
        }

    }

    /**
     * @author Paul Coleman
     * @date 2018-02-26
     * @description Tests creating a confirmation offer (as initiator), create counter offer (as responder), and accept the counter offer (as initiator).
     */
    @IsTest
    private static void testAcceptAndCounterOffers()
    {
        User initiator; // to be created on the fly
        User responder;
        Dispute__c newDispute = loadInitiatorDispute(true);
        Datetime now = Datetime.now();
        String confirmationOfferHash;
        String counterOfferHash;
        Set<Id> newResponderAccountId = new Set<Id>();

        //create a portal user for the Responder contact for the test to be able to switch parties
        for( Contact ttContact : [SELECT Id, AccountId, Account.user_pk_id__c FROM Contact WHERE Id = :newDispute.ResponderContact__c])
        {
            if( null != ttContact.Account.user_pk_id__c ) //pk id required for User.FederationIdentifier
            {
                newResponderAccountId.add(ttContact.AccountId);
            }
        }

        User[] newUsers = new ThumbtackUserSSOProvisioner().createThumbackUsers( newResponderAccountId );
        insert newUsers;

        initiator = [SELECT Id, ContactId, UserType, Username FROM User WHERE ContactId = :newDispute.InitiatorContact__c LIMIT 1];
        responder = [SELECT Id, ContactId, UserType, Username FROM User WHERE ContactId = :newDispute.ResponderContact__c LIMIT 1];
        System.runAs( initiator )
        {
            // create a confirmation offer
            Map<String, Object> offerFields = new Map<String, Object>{ 'DisputeHash__c' => newDispute.IdHash__c, 'ResolutionCompleteByDate__c' => Datetime.now(), 'DesiredResolution__c' => 'I want a full refund.', 'DesiredRefundAmount__c' => 10000, 'Note__c' => 'My master bedroom is missing.' };
            confirmationOfferHash = SolutionCenterController.createOffer( offerFields );
        }

        Test.startTest();

            // switch to other party, counter offer
            System.runAs( responder )
            {
                Map<String, Object> offerFields = new Map<String, Object>{ 'DisputeHash__c' => newDispute.IdHash__c, 'ResolutionCompleteByDate__c' => Datetime.now(), 'DesiredResolution__c' => 'I want a full refund.', 'DesiredRefundAmount__c' => 10000, 'Note__c' => 'My master bedroom is missing.' };
                counterOfferHash = SolutionCenterController.createOffer( offerFields );
            }

            System.runAs( initiator )
            {
                SolutionCenterController.acceptOffer(counterOfferHash, JSON.serialize(now) );
                System.assertEquals( 'Accepted', [SELECT Status__c FROM DisputeOffer__c WHERE IdHash__c = :counterOfferHash].Status__c, 'Dispute Offer status not in `Accepted` status.' );
            }

        Test.stopTest();

        System.runAs( TestUtilities.USER_TACK_BOT )
        {
            Dispute__c updatedDispute = [SELECT InitiatorTotalOfferCount__c, ResponderTotalOfferCount__c, (SELECT Id, IdHash__c, ResolutionCompleteByDate__c, Status__c, ContactCreatedBy__c, ContactSharedWith__c FROM DisputeOffers__r) FROM Dispute__c WHERE Id = :newDispute.Id LIMIT 1];
            //assert Dispute record changes
            System.assertEquals(1, updatedDispute.InitiatorTotalOfferCount__c, 'Dispute InitiatorTotalOfferCount__c value not updated.');
            System.assertEquals(1, updatedDispute.ResponderTotalOfferCount__c, 'Dispute ResponderTotalOfferCount__c value not updated.');

            DisputeOffer__c[] offers = updatedDispute.DisputeOffers__r;
            System.assertEquals(2, offers.size(), 'Offer count not correct');
            for (DisputeOffer__c offer : offers)
            {
                if (confirmationOfferHash == offer.IdHash__c)
                {
                    System.assertEquals('Countered', offer.Status__c, 'Confirmation Offer not in `Countered` status');
                }
                else
                {
                    System.assertEquals(now, offer.ResolutionCompleteByDate__c, 'Counter Offer ResolutionCompleteByDate__c is not the correct date');
                    System.assertEquals('Accepted', offer.Status__c, 'Counter Offer is not Accepted status');
                }
            }
        }
    }

}